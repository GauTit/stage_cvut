import osmnx as ox
import geopandas as gpd
from shapely.geometry import Point, box, LineString
from shapely.ops import nearest_points
import pandas as pd
import numpy as np
import folium
from matplotlib import colormaps
import matplotlib.colors as mcolors
import openpyxl
import math
from scipy.spatial.distance import pdist, squareform
from sklearn.metrics import mean_squared_error

# ==================== CONFIGURATION ET PARAM√àTRES ====================

# Chemins des fichiers
input_file = '2023_T4_sites_Metropole.csv'
output_file = 'stations_normandie_orange.csv'

string_dep = "Normandie"
string_dep_arrange = string_dep + ", France"

# Param√®tres
buffer_error_atour = 1000  # Buffer de couverture en m√®tres (1km)
MAX_NEIGHBOR_DISTANCE = 20000  # Distance max entre stations voisines (20km)

# Configuration OSMnx
ox.settings.use_cache = True
ox.settings.log_console = True

print(f"===== üèÅ D√âBUT ANALYSE COUVERTURE ROUTI√àRE - {string_dep} =====")

# ==================== PR√âPARATION DES DONN√âES STATIONS ====================

print("üìã Pr√©paration des donn√©es de stations...")

# Lecture et filtrage du CSV original
df = pd.read_csv(input_file, sep=';')
filtered = df[(df['nom_reg'] == string_dep) & (df['nom_op'] == 'Orange')]
filtered.to_csv(output_file, index=False, sep=';')

# Charger les stations filtr√©es
stations_df = pd.read_csv(
    output_file,
    sep=None,
    engine='python',
    decimal=','
)

print(f"‚úÖ Stations trouv√©es: {len(stations_df)}")

# D√©tecter le nom de la station
name_col = next(
    (col for col in stations_df.columns if col.lower() not in ['latitude', 'longitude', 'lat', 'lon', 'lng']),
    stations_df.columns[0]
)

# Cr√©er GeoDataFrame des stations
stations_gdf = gpd.GeoDataFrame(
    stations_df,
    geometry=stations_df.apply(lambda r: Point(r.longitude, r.latitude), axis=1),
    crs="EPSG:4326"
)

# Projection en Lambert-93 (m√®tres)
stations_proj = stations_gdf.to_crs("EPSG:2154")

# ==================== T√âL√âCHARGEMENT DES DONN√âES OSM ====================

print("üåê T√©l√©chargement des donn√©es OSM...")

# 1. TOUTES LES ROUTES PRINCIPALES DE LA R√âGION (pour calcul couverture globale)
road_filter = '["highway"~"motorway|motorway_link|trunk|trunk_link|primary|primary_link"]'
print(f"üì° T√©l√©chargement routes principales: {string_dep_arrange}")

G_road_global = ox.graph_from_place(
    string_dep_arrange,
    network_type=None,
    custom_filter=road_filter,
    retain_all=True
)
nodes_road_global, edges_road_global = ox.graph_to_gdfs(G_road_global)
edges_road_global = edges_road_global.to_crs("EPSG:2154")

print(f"‚úÖ Routes principales t√©l√©charg√©es: {len(edges_road_global)}")
print(f"‚úÖ Longueur totale: {edges_road_global.length.sum()/1000:.1f} km")

# 2. ROUTES LOCALES (pour rattachement des stations - zone limit√©e)
# D√©finir zone d'int√©r√™t autour des stations (buffer 10 km)
minx, miny, maxx, maxy = stations_proj.total_bounds
buffer = 10000  # m√®tres
roi = box(minx - buffer, miny - buffer, maxx + buffer, maxy + buffer)

# T√©l√©charger routes dans la zone d'int√©r√™t pour rattachement
G_road_local = ox.graph_from_place(
    string_dep_arrange,
    network_type=None,
    custom_filter=road_filter,
    retain_all=True
)
nodes_road_local, edges_road_local = ox.graph_to_gdfs(G_road_local)
edges_road_local = edges_road_local.to_crs("EPSG:2154")
edges_road_local = edges_road_local[edges_road_local.intersects(roi)].copy()

# 3. VOIES FERR√âES (optionnel)
try:
    rail_filter = '["railway"="rail"]'
    G_rail = ox.graph_from_place(
        string_dep_arrange,
        network_type=None,
        custom_filter=rail_filter,
        retain_all=True
    )
    nodes_rail, edges_rail = ox.graph_to_gdfs(G_rail)
    edges_rail = edges_rail.to_crs("EPSG:2154")
    edges_rail = edges_rail[edges_rail.intersects(roi)].copy()
    print(f"‚úÖ Voies ferr√©es trouv√©es: {len(edges_rail)}")
except:
    edges_rail = gpd.GeoDataFrame(columns=['geometry', 'osmid'], crs="EPSG:2154")
    print("‚ö†Ô∏è Aucune voie ferr√©e trouv√©e")

# ==================== RATTACHEMENT DES STATIONS AUX ROUTES ====================

print("üîó Rattachement des stations aux routes...")

# Combiner routes et rails pour rattachement
def subset_osm(edges):
    cols = ['geometry', 'osmid']
    for extra in ['ref', 'name']:
        if extra in edges.columns:
            cols.append(extra)
    return edges[cols].copy()

edges_for_matching = pd.concat([
    subset_osm(edges_road_local), 
    subset_osm(edges_rail)
], ignore_index=True)

# Cr√©er buffer autour des stations pour trouver routes proches
stations_buffered = stations_proj.copy()
stations_buffered['geometry'] = stations_buffered.geometry.buffer(1000)  # Buffer de 1km

# Spatial join pour toutes les routes dans le buffer
stations_all_routes = gpd.sjoin(
    stations_buffered,
    edges_for_matching,
    how='left',
    predicate='intersects'
)

# Calculer distances r√©elles (pas sur le buffer)
stations_all_routes['dist_to_highway_m'] = stations_all_routes.apply(
    lambda row: stations_proj.loc[row.name, 'geometry'].distance(
        edges_for_matching.loc[row.index_right, 'geometry']
    ) if pd.notna(row.get('index_right')) else np.nan,
    axis=1
)

# Filtrer les relations √† moins de 1 km
stations_all_routes = stations_all_routes[stations_all_routes['dist_to_highway_m'] < 1000]

# Remettre la g√©om√©trie originale des stations
stations_all_routes['geometry'] = stations_all_routes.apply(
    lambda row: stations_proj.loc[row.name, 'geometry'], axis=1
)

if stations_all_routes.empty:
    print("‚ùå ERREUR: Aucune station trouv√©e √† moins de 1 km d'une route!")
    exit()

# Renommer et nettoyer
stations_all_routes = stations_all_routes.rename(columns={'osmid': 'nearest_osmid'}).drop(columns=['index_right'])

print(f"‚úÖ Relations station-route trouv√©es: {len(stations_all_routes)}")
print(f"‚úÖ Stations uniques rattach√©es: {len(stations_all_routes.index.unique())}")

# ==================== CR√âATION DES CL√âS DE REGROUPEMENT ====================

print("üîë Cr√©ation des cl√©s de regroupement...")

# Gestion des osmids multiples
def create_osmid_key(osmid):
    if isinstance(osmid, list):
        return tuple(sorted(osmid))
    if pd.isna(osmid):
        return None
    return (osmid,)

stations_all_routes['osmid_key'] = stations_all_routes['nearest_osmid'].apply(create_osmid_key)

# Assurer la pr√©sence des colonnes
for col in ['ref', 'name']:
    if col not in stations_all_routes.columns:
        stations_all_routes[col] = np.nan

# Cr√©ation cl√© parent (ref > name > osmid)
def create_parent_key(row):
    ref = row['ref']
    if not (isinstance(ref, float) and math.isnan(ref)):
        if isinstance(ref, list) and ref:
            return f"ref:{';'.join(map(str, ref))}"
        if isinstance(ref, str) and ref.strip():
            return f"ref:{ref.strip()}"
        if not isinstance(ref, (list, str)):
            return f"ref:{ref}"
    name = row['name']
    if isinstance(name, str) and name.strip():
        return f"name:{name.strip()}"
    return create_osmid_key(row['nearest_osmid'])

stations_all_routes['parent_key'] = stations_all_routes.apply(create_parent_key, axis=1)

# ==================== ALGORITHMES DE RECONSTRUCTION ====================

def solve_tsp_open_with_distance_limit(points, max_distance):
    """R√©soudre TSP OUVERT avec algorithme glouton et limite de distance"""
    if len(points) <= 2:
        return list(range(len(points)))
    
    n = len(points)
    distances = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            if i != j:
                distances[i][j] = points[i]['geometry'].distance(points[j]['geometry'])
    
    # Algorithme du plus proche voisin avec limite
    unvisited = set(range(1, n))
    current = 0
    tour = [current]
    
    while unvisited:
        valid_neighbors = [x for x in unvisited if distances[current][x] <= max_distance]
        if not valid_neighbors:
            break
        nearest = min(valid_neighbors, key=lambda x: distances[current][x])
        tour.append(nearest)
        unvisited.remove(nearest)
        current = nearest
    
    return tour

def create_neighbor_links_with_limit(points, max_distance):
    """Cr√©er liens entre stations voisines avec limite de distance"""
    if len(points) < 2:
        return []
    
    links = []
    
    if len(points) == 2:
        dist = points[0]['geometry'].distance(points[1]['geometry'])
        if dist <= max_distance:
            links.append(LineString([points[0]['coords'], points[1]['coords']]))
        return links
    
    # Pour plus de 2 stations, utiliser TSP avec limite
    unprocessed = list(range(len(points)))
    
    while unprocessed:
        start_idx = unprocessed[0]
        current_points = [points[i] for i in unprocessed]
        local_to_global = {i: unprocessed[i] for i in range(len(current_points))}
        
        tour = solve_tsp_open_with_distance_limit(current_points, max_distance)
        
        # Cr√©er liens pour ce segment
        for i in range(len(tour) - 1):
            idx1 = local_to_global[tour[i]]
            idx2 = local_to_global[tour[i + 1]]
            
            dist = points[idx1]['geometry'].distance(points[idx2]['geometry'])
            if dist <= max_distance:
                links.append(LineString([points[idx1]['coords'], points[idx2]['coords']]))
        
        processed_global_indices = [local_to_global[i] for i in tour]
        for idx in processed_global_indices:
            unprocessed.remove(idx)
        
        if len(unprocessed) == len(current_points):
            unprocessed.pop(0)
    
    return links

# ==================== CR√âATION DES LIENS ENTRE STATIONS ====================

print("üîó Cr√©ation des liens entre stations voisines...")

neighbor_geoms = []
valid = stations_all_routes.dropna(subset=['dist_to_highway_m'])
valid = valid[valid['dist_to_highway_m'] < 1000]

total_links_created = 0

for pk, group in valid.groupby('parent_key'):
    if len(group) < 2:
        continue
    
    # Cr√©er liste des stations uniques
    stations_dict = {}
    for idx, row in group.iterrows():
        station_id = (row.geometry.x, row.geometry.y)
        if station_id not in stations_dict:
            stations_dict[station_id] = {
                'idx': idx,
                'geometry': row.geometry,
                'coords': (row.geometry.x, row.geometry.y)
            }
    
    stations_list = list(stations_dict.values())
    
    # Cr√©er liens avec limite de distance
    route_links = create_neighbor_links_with_limit(stations_list, MAX_NEIGHBOR_DISTANCE)
    links_created = len(route_links)
    total_links_created += links_created
    neighbor_geoms.extend(route_links)

print(f"‚úÖ Total liens cr√©√©s: {total_links_created} (limite: {MAX_NEIGHBOR_DISTANCE/1000} km)")

# ==================== CALCUL DE LA COUVERTURE GLOBALE R√âELLE ====================

print("\n===== üìä CALCUL DE LA COUVERTURE GLOBALE R√âELLE =====")

if neighbor_geoms:
    # Cr√©er GeoDataFrame des liens reconstruits
    neighbors_proj = gpd.GeoDataFrame(geometry=neighbor_geoms, crs="EPSG:2154")
    
    # Cr√©er buffer global unique (√©vite double comptage)
    all_links_union = neighbors_proj.union_all()  # Correction: nouvelle m√©thode
    global_coverage_buffer = all_links_union.buffer(buffer_error_atour)
    
    # Convertir buffer en GeoDataFrame
    buffer_gdf = gpd.GeoDataFrame([1], geometry=[global_coverage_buffer], crs="EPSG:2154")
    
    # Intersection avec toutes les routes principales
    covered_portions = gpd.overlay(edges_road_global, buffer_gdf, how='intersection')
    
    # Calculer longueurs
    total_length_km = edges_road_global.length.sum() / 1000
    covered_length_km = covered_portions.length.sum() / 1000
    
    # Pourcentage de couverture r√©el
    real_coverage_percentage = (covered_length_km / total_length_km) * 100
    
    print(f"üìè Longueur totale routes principales {string_dep}: {total_length_km:.1f} km")
    print(f"üìè Longueur couverte (buffer {buffer_error_atour}m): {covered_length_km:.1f} km")
    print(f"üéØ COUVERTURE R√âELLE: {real_coverage_percentage:.2f}%")
    
    # Statistiques d√©taill√©es
    nb_routes_totales = len(edges_road_global)
    
    # Compter segments avec couverture (gestion des osmid en liste)
    if 'osmid' in covered_portions.columns and not covered_portions.empty:
        # G√©rer les osmid qui peuvent √™tre des listes
        try:
            # Essayer comptage direct d'abord
            routes_avec_couverture = covered_portions['osmid'].nunique()
        except (TypeError, ValueError):
            # Si erreur (osmid en liste), compter manuellement
            unique_osmids = set()
            for osmid in covered_portions['osmid']:
                if isinstance(osmid, list):
                    unique_osmids.update(osmid)
                else:
                    unique_osmids.add(osmid)
            routes_avec_couverture = len(unique_osmids)
    else:
        routes_avec_couverture = len(covered_portions)
    
    print(f"üìä Segments routiers totaux: {nb_routes_totales}")
    print(f"üìä Segments avec couverture: {routes_avec_couverture}")
    print(f"üìä % segments touch√©s: {(routes_avec_couverture/nb_routes_totales)*100:.1f}%")
    
else:
    print("‚ùå Aucun lien reconstruit - couverture = 0%")
    real_coverage_percentage = 0.0
    total_length_km = edges_road_global.length.sum() / 1000
    covered_length_km = 0.0
    covered_portions = gpd.GeoDataFrame()

# ==================== CR√âATION DE LA CARTE INTERACTIVE ====================

print("\nüó∫Ô∏è Cr√©ation de la carte interactive...")

# Reprojections pour Folium
edges_global_wgs = edges_road_global.to_crs("EPSG:4326")
stations_wgs = valid.to_crs("EPSG:4326")

# Centre de la carte
center_lat = edges_global_wgs.geometry.centroid.y.mean()
center_lon = edges_global_wgs.geometry.centroid.x.mean()

# Cr√©er carte
map_folium = folium.Map(location=[center_lat, center_lon], zoom_start=8)

# 1. TOUTES LES ROUTES PRINCIPALES (rouge)
folium.GeoJson(
    edges_global_wgs[['geometry']].to_json(),
    name=f'Toutes routes principales {string_dep}',
    style_function=lambda f: {
        'color': 'red', 
        'weight': 2, 
        'opacity': 0.5
    }
).add_to(map_folium)

# 2. LIENS RECONSTRUCTION (bleu)
if neighbor_geoms:
    neighbors_wgs = neighbors_proj.to_crs("EPSG:4326")
    folium.GeoJson(
        neighbors_wgs.to_json(),
        name='Routes reconstruites (stations)',
        style_function=lambda f: {
            'color': 'blue', 
            'weight': 3, 
            'opacity': 0.8
        }
    ).add_to(map_folium)

# 3. ZONE DE COUVERTURE GLOBALE (vert)
if neighbor_geoms:
    buffer_gdf_wgs = buffer_gdf.to_crs("EPSG:4326")
    folium.GeoJson(
        buffer_gdf_wgs.to_json(),
        name=f'Zone de couverture ({buffer_error_atour}m)',
        style_function=lambda f: {
            'color': 'green',
            'weight': 1,
            'opacity': 0.4,
            'fill': True,
            'fillColor': 'green',
            'fillOpacity': 0.15
        }
    ).add_to(map_folium)

# 4. PORTIONS EFFECTIVEMENT COUVERTES (jaune)
if not covered_portions.empty:
    covered_portions_wgs = covered_portions.to_crs("EPSG:4326")
    folium.GeoJson(
        covered_portions_wgs[['geometry']].to_json(),
        name='Routes effectivement couvertes',
        style_function=lambda f: {
            'color': 'yellow',
            'weight': 4,
            'opacity': 0.9
        }
    ).add_to(map_folium)

# 5. STATIONS (points color√©s par route)
if not stations_wgs.empty:
    keys = [k for k in stations_wgs['parent_key'].unique() if pd.notna(k)]
    n = len(keys)
    if n > 0:
        palette = colormaps['tab20'](np.linspace(0, 1, min(n, 20)))
        color_dict = {k: mcolors.to_hex(palette[i % 20]) for i, k in enumerate(keys)}
    else:
        color_dict = {}

    for _, row in stations_wgs.iterrows():
        dist = row['dist_to_highway_m']
        if pd.isna(dist) or dist >= 1000:
            continue
        
        pk = row['parent_key']
        station_color = color_dict.get(pk, '#000000')
        
        folium.CircleMarker(
            location=[row.geometry.y, row.geometry.x],
            radius=4,
            color=station_color,
            fill=True,
            fill_color=station_color,
            fill_opacity=0.8,
            popup=(
                f"<b>Station</b>: {row[name_col]}<br>"
                f"<b>Route</b>: {pk}<br>"
                f"<b>Distance route</b>: {dist:.0f}m"
            )
        ).add_to(map_folium)

# 6. L√âGENDE AVEC VALEURS R√âELLES
legend_html = (
    '<div style="position:fixed; bottom:50px; left:50px; '
    'background:white; border:2px solid grey; padding:10px; '
    'font-size:14px; z-index:9999; width:320px;">'
    f'<b>üìä COUVERTURE ROUTES PRINCIPALES {string_dep.upper()}</b><br><br>'
    '<b style="color:red;">‚îÅ‚îÅ‚îÅ</b> Toutes routes principales<br>'
    '<b style="color:yellow;">‚îÅ‚îÅ‚îÅ</b> Portions couvertes<br>'
    '<b style="color:blue;">‚îÅ‚îÅ‚îÅ</b> Routes reconstruites<br>'
    '<b style="color:green;">‚ñì‚ñì‚ñì</b> Zone de couverture<br>'
    '<b>‚óè</b> Stations (color√©es par route)<br><br>'
    '<b>üìà R√âSULTATS:</b><br>'
    f'üéØ <b>Couverture: {real_coverage_percentage:.2f}%</b><br>'
    f'üìè Total: <b>{total_length_km:.1f} km</b><br>'
    f'üìè Couvert: <b>{covered_length_km:.1f} km</b><br>'
    f'üîó Buffer: <b>{buffer_error_atour}m</b><br>'
    f'üì± Stations: <b>{len(stations_wgs)}</b><br>'
    '</div>'
)
map_folium.get_root().html.add_child(folium.Element(legend_html))

# Contr√¥le des calques
folium.LayerControl(collapsed=False).add_to(map_folium)

# Sauvegarde
map_filename = f"map_coverage_{string_dep.lower()}.html"
map_folium.save(map_filename)
print(f"‚úÖ Carte sauvegard√©e: {map_filename}")

# ==================== EXPORT DES R√âSULTATS ====================

print("\nüìÑ Export des r√©sultats...")

# Pr√©parer donn√©es d'export
stations_export = valid.copy()
stations_export['latitude'] = stations_export.geometry.to_crs("EPSG:4326").y
stations_export['longitude'] = stations_export.geometry.to_crs("EPSG:4326").x
stations_export = stations_export.drop(columns=['geometry'])

# Statistiques par route
route_stats = (
    valid.groupby('parent_key')
    .size()
    .reset_index(name='station_count')
    .sort_values('station_count', ascending=False)
)

# M√©triques globales
global_metrics = {
    'region': string_dep,
    'total_stations_input': len(stations_df),
    'stations_matched_to_roads': len(valid),
    'stations_not_matched': len(stations_df) - len(valid),
    'unique_routes_with_stations': len(route_stats),
    'total_road_network_km': total_length_km,
    'covered_length_km': covered_length_km,
    'coverage_percentage': real_coverage_percentage,
    'buffer_radius_m': buffer_error_atour,
    'max_neighbor_distance_m': MAX_NEIGHBOR_DISTANCE,
    'total_reconstruction_links': total_links_created,
    'road_types_analyzed': 'motorway,motorway_link,trunk,trunk_link,primary,primary_link'
}

# Export Excel
excel_filename = f"analysis_coverage_{string_dep.lower()}.xlsx"
with pd.ExcelWriter(excel_filename, engine='openpyxl') as writer:
    # Stations
    stations_export[
        ['latitude','longitude','nearest_osmid','ref','name','dist_to_highway_m','parent_key']
    ].to_excel(writer, sheet_name='Stations', index=False)
    
    # Statistiques routes
    route_stats.to_excel(writer, sheet_name='Routes_Stats', index=False)
    
    # M√©triques globales
    global_df = pd.DataFrame([global_metrics])
    global_df.to_excel(writer, sheet_name='Global_Metrics', index=False)

print(f"‚úÖ Fichier Excel sauvegard√©: {excel_filename}")

# ==================== R√âSUM√â FINAL ====================

print(f"\n===== ‚úÖ ANALYSE TERMIN√âE - {string_dep.upper()} =====")
print(f"üéØ COUVERTURE GLOBALE: {real_coverage_percentage:.2f}%")
print(f"üìè R√©seau routier total: {total_length_km:.1f} km")
print(f"üìè Longueur couverte: {covered_length_km:.1f} km")
print(f"üì± Stations analys√©es: {len(stations_df)} ‚Üí {len(valid)} utilis√©es")
print(f"üîó Liens de reconstruction: {total_links_created}")
print(f"üó∫Ô∏è Carte: {map_filename}")
print(f"üìä Donn√©es: {excel_filename}")

if real_coverage_percentage < 30:
    print("‚ö†Ô∏è COUVERTURE FAIBLE - Recommandations:")
    print("   ‚Ä¢ Augmenter le nombre de stations")
    print("   ‚Ä¢ R√©duire MAX_NEIGHBOR_DISTANCE si fragment√©")
    print("   ‚Ä¢ V√©rifier la qualit√© des donn√©es stations")
elif real_coverage_percentage < 70:
    print("‚úÖ COUVERTURE MOYENNE - Bon potentiel d'am√©lioration")
else:
    print("üèÜ EXCELLENTE COUVERTURE - R√©seau bien maill√©")